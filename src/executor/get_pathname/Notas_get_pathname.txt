Notas sobre get_pathname / cmd_to_pathname / cmd_to_file_path / como sea que se llame ahora

- Si hago <nombre>/
		Debería buscar nombre en el directorio actual, si lo encuentro y no es un directorio
		debería printear:
			minishell: nombre/: Not a directory
			$? = 126
		Pero minishell ahora mismo hará:
	- Esto ha sido arreglado, ahora funciona como en bash

-Bash gestiona esto:
	minishell/////
	igual que
	minishell/

	O sea, los '/' que sobran los ignora correctamente, no sé si minishell hace esto, habría que
	comprobarlo
	- Esto ha sido arreglado, ya funciona como en bash

- Hay que testear el caso "/////" "/" "//" etc.
	- Lo he testeado y parece ir como en bash

- Considerar esto:
	El directorio root, se llama "/" ? O representa que no tiene nombre por que es el root
	y el '/' en el nombre es solo la indicación de que es un directorio.
	Creo que es este segundo caso. Y eso es importante para no liarla.
	- Es lo segundo y ya ha sido adaptado, esto no da problemas en minishell

Sobre lo que he aprendido respecto a root, y las direcciones
Una vez más me doy cuenta de que algo que parece muy complejo y a veces rebuscado acaba siendo la
consecuencia de una serie de normas muy simples.

Cuando escribimos un pathname a bash, este sigue unas normas muy sencillas.
Si el nombre comienza por '/' entonces es una dirección absoluta. Por qué? Por que "/" es la forma
que tienes de decirle a bash, "En la carpeta root".
Es como si la carpeta root no tuviese nombre, es el origen de todo. Y es un directorio.
Por lo tanto, la única forma que tienes de llamar a este directorio, dado que nunca puedes estar
fuera de él, es usar "/". Pero esto representa "" + '/'.

Por esto, "/" nunca puede ser confundido con un path relativo al directorio actual.

SOBRE ARCHIVOS LINKED O COMO SE DIGAN:

He descubierto por qué algunos programas como "make" no los encuentro con mi get_pathname. Es por que "make"
es un archivo link de estos. Y mi programa no los gestiona. Así que habrá que cambiar cómo funciona mi
get_pathname.
