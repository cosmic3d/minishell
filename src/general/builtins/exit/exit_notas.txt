Notas sobre exit:

(AL FINAL DEL TODO ESTÁN MIS NOTAS MÁS RECIENTES, QUE SON LAS QUE IMPORTAN MÁS)

En el subject pone que hay que implementar exit "without options"

No sé si eso significa que hay que solo aceptar "exit" y fuera.

En cualquier caso, no es muy difícil de implementar parece.

Exit funciona así:

	exit <num>

Sale limpiamente de bash y establece el exit_status con el valor de num.
Si no se establece num, entonces exit_status = 0;

Además el valor de exit_status está en un ciclo del 0 al 255
Por lo tanto exit 256 hará exit_status = 0.

exit comprueba los errores en este orden:

Va iterando por los argumentos recibidos, en el momento en que encuentra uno que no sea
numérico, da error:
	"<arg>: numeric argument required" $? = 255
	Nota: En debian me da $? = 2, pero habrá que usar de referencia el mac de 42.
	habrá que mirar en clase "which exit" por si acaso el mac llame a un programa
	exit en vez de el builtin. Aunque debería priorizar el builtin o sea que es
	una tontería I guess. Aún así lo probaré.

Si en este proceso se da cuenta de que hay más de un argumento, entonces da este error:
	"too many arguments" $? = 1

Si el primer argumento NO es numerico, error numeric argument tal
Si el primero SI es numerico, bien.
	Tras esto, da igual si el segundo es numerico o no, error too many arguments.

Si hay too many arguments, exit NO ES EJECUTADO.

Si hay un argument y ese no es numerico, printea el error pero SI es ejecutado.
	Y hace return (255);

Si hay un argument y ese es numerico, hace return (el numero en cuestón); (loopeandolo etc.)

Si exit se ejecuta, se printea "exit".

exit acepta un long. Cualquier número superior o inferior a un long, da error numeric
argument required.

LONG_MAX = 9223372036854775807
LONG_MIN = -9223372036854775808

Exit acepta espacios antes y después del número.


CASOS EN BASH:

minishell > exit --1
exit
bash: exit: --1: numeric argument required
minishell > echo $?
2

-----------

minishell > exit 2+4
exit
bash: exit: 2+4: numeric argument required
minishell > echo $?
2

Exit status de exit en bash, en mac de 42:

el exit status será el argumento de exit % 256

Parece que bash recibe el argumento de exit y lo trata como un unsigned int.
Entonces, si recibe "-1", entonces en realidad lo trata como UINT_MAX

Además, parece que solo acepta numeros cuya representación quepa en un long.
De LONG_MIN a LONG_MAX.

Es un poco confuso de primeras, por que por un lado lo trata como un numero unsigned,
pero por otro lo trata como un numero signed.

El proceso parece ser.

-Comprueba si el numero recibido puede ser representado como un long.
Si no puede, ya sea por que está fuera de los límites como por que contiene caracteres inválidos,
entonces el exit_status será 255.
Y se mostrará este error:
	bash: exit: <el argumento>: numeric argument required

-Si el argumento sí puede ser representado por un long, entonces metelo en un unsigned long.

-Ahora haz:
	exit_status = arg_ulong % 256;

Y ese será el exit_status a devolver.

-Si exit recibe más de un argumento, mostrará este error:
	bash: exit: too many arguments
	Y $? = 1
	En este caso, exit no se termina de ejecutar, se vuelve a bash sin salir del mismo.

-Pero, es prioridad el error de numeric argument required.
	Es decir, si hay multiples argumentos, por algún motivo, primero se comprueba si el argumento 1
	es válido. Si no lo es, el error será el de numeric argument required.
	Si es válido, entonces sí se mostrará el error too many arguments.

- Exit siempre printea "exit" antes de salir. Se ejecute o no el exit hasta el final.
Y este "exit" debe ser printeado antes del mensaje de error que tenga exit, si lo tiene.

TESTS QUE YA HE HECHO:

	exit arg				|	$? bash	|	$? minishell
		123						123			123
		219						219			219
		10593					97			97
		00015					15			15
		--13535					255			255
		+9991					7			7
		++123					255			255
		81305939439				239			239
		-991389513000			216			216
		1839950001353591350		54			54
		00000...00000000185		185			185
		-139859389583948398439	255			255
		999001935939959139519	255			255
(LONGMAX)9223372036854775807	255			255
(+1)	9223372036854775808		255 (err)	255 (err)
(-1)	9223372036854775806		254			254
(LONGMIN)-9223372036854775808	0			0
(-1)	-9223372036854775809	255 (err)	255 (err)
(+1)	-9223372036854775807	1			1

Parece que va perfecto.

Al final hice:

arg_long = ft_strtol(arg)
exit_status = arg_long % 256

exit_status puede ser negativo, la función exit() ya lo convierte al numero que toca.

